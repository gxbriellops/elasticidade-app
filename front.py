import streamlit as st
import main as m
import database as db
import pandas as pd
import sqlite3 as sql

# estabelecendo uma conex√£o com o bando de dados
con = sql.connect("dados.db")
consultaSQL = "SELECT * FROM vendas"
dadosSQL = pd.read_sql_query(consultaSQL, con)

# Criando o banco de dados
db.criarBanco()

st.set_page_config(layout="wide")

st.title("ü•™ Lanchonete do Amaro - An√°lise de Pre√ßos")
colunaE, colunaD = st.columns(2)
with colunaE:
    st.caption("Para a Lanchonete do Amaro, entender como os clientes respondem √†s mudan√ßas nos pre√ßos dos salgados √© essencial. Esta an√°lise nos ajuda a encontrar o equil√≠brio perfeito entre pre√ßos competitivos e lucratividade, mantendo nossos clientes satisfeitos.")

st.write("")
st.write("---")
st.write("")

with st.container():
    st.subheader("üìä Custos de Produ√ß√£o do Salgado:")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        Custo = st.number_input("Custo dos ingredientes (por unidade): R$", min_value=1.0, step=0.01)
    with col2:
        somaDeSalarios = st.number_input("Custos com funcion√°rios (mensal): R$", min_value=1.0, step=0.01)
    with col3:
        totalProducao = st.number_input("Produ√ß√£o de salgados por dia: ", min_value=1.0, step=1.0)
    with col4:
        Lucro = st.number_input("Margem de lucro desejada (%): ", min_value=0.0, max_value=100.0, step=1.0, format="%.1f")

    precoUnidade = m.pre√ßoUnidade(Custo, somaDeSalarios, totalProducao)

    calcular_preco_final = st.button("Calcular Pre√ßo Sugerido")
    if calcular_preco_final:
        st.success(F"Pre√ßo SUGERIDO de venda: R${m.pre√ßoFinal(precoUnidade, Lucro):.2f}")

st.write("")
st.write("")

with st.container():
    col5, col6 = st.columns(2)
    with col5:
        st.subheader("üè∑Ô∏è Defini√ß√£o do Pre√ßo de Venda:")
        precoFinal = st.number_input("Pre√ßo de venda do salgado: R$", min_value=1.0, step=0.01 )
    with col6:
        st.subheader("")
        VendasPorDia = st.number_input("Quantidade m√©dia de salgados vendidos por dia: ", min_value=1.0, step=1.0)
        VendasPorMesAprox = VendasPorDia * 30

    # Inserindo os dados no banco (elasticidade √© None no in√≠cio)
    inserir_dados = st.button("Registrar Dados")
    if inserir_dados:
        if precoUnidade is not None:
            db.inserirDados(
                data_adicionada=db.dataDado(),
                precoInicio=precoUnidade,
                precoFinal=precoFinal,
                quantidadeInicio=totalProducao,
                quantidadeFinal=VendasPorMesAprox,
                elasticidade=None
            )
            st.success("Dados inseridos com sucesso!")
        else:
            st.error("Calcule o pre√ßo sugerido antes de inserir os dados.")

st.write("")
st.write("")

dados = db.buscarUltimosDados()

with st.container():
    st.subheader("üìà An√°lise de Elasticidade:")
    calcular_elasticidade = st.button("Analisar Impacto")
    if calcular_elasticidade:
        if dados:
            precoInicio, precoFinal, quantidadeInicio, quantidadeFinal, _ = dados
            elasticidadePD = m.elasticidade(quantidadeInicio, quantidadeFinal, precoInicio, precoFinal)

            # Atualizando o campo 'elasticidade' no registro mais recente
            db.atualizarElasticidade(elasticidadePD)
            st.header(f"Elasticidade pre√ßo-demanda: {elasticidadePD:.2f}")
            if elasticidadePD < -1:
                st.warning("‚ö†Ô∏è Aten√ß√£o! Seus clientes est√£o muito sens√≠veis ao pre√ßo. Um aumento pode reduzir significativamente as vendas. Considere manter os pre√ßos atuais ou fazer ajustes menores.")
            elif elasticidadePD == -1:
                st.info("üìä As vendas respondem proporcionalmente √†s mudan√ßas de pre√ßo. Qualquer altera√ß√£o deve ser bem planejada.")
            elif -1 < elasticidadePD < 0:
                st.success("‚úÖ Boa not√≠cia! Seus clientes s√£o fi√©is aos salgados. Voc√™ tem flexibilidade para ajustar os pre√ßos mantendo as vendas est√°veis.")
            elif elasticidadePD == 0:
                st.info("üéØ Seus salgados t√™m demanda garantida! Os clientes compram independentemente do pre√ßo. Poss√≠vel ajustar pre√ßos com seguran√ßa.")
            elif elasticidadePD > 0:
                st.success("üåü Interessante! Seus salgados s√£o vistos como produto premium. Os clientes associam maior pre√ßo com maior qualidade.")

        else:
            st.header("Nenhum dado encontrado para calcular elasticidade.")

st.write("")
st.write("")

st.subheader("üìä Desempenho do Neg√≥cio:")
st.caption("Analise as tend√™ncias por per√≠odo.")
opcao = st.selectbox("Selecione o per√≠odo de an√°lise", ("Todos os registros", "√öltima semana", "√öltimos 15 dias","√öltimo m√™s", "√öltimos 2 meses", "√öltimos 3 meses", "√öltimos 4 meses"))


if opcao == "Todos os registros":
    dados_filtrados = dadosSQL
else:
    periodo_map = {
        "√öltima semana": 7,
        "√öltimos 15 dias": 15,
        "√öltimo m√™s": 30,
        "√öltimos 2 meses": 60,
        "√öltimos 3 meses": 90,
        "√öltimos 4 meses": 120
    }
    numDias = periodo_map[opcao]
    dados_filtrados = dadosSQL[-numDias:]

colg1, colg2 = st.columns(2)
with colg1:
    st.write("Tend√™ncia de Elasticidade:")
    st.line_chart(dados_filtrados, x="data_adicionada", y="elasticidade", x_label="Data", y_label="Elasticidade", color="#008000")

with colg2:
    st.write("Comparativo de Vendas:")
    st.bar_chart(dados_filtrados, x="data_adicionada", y=["quantidadeInicio", "quantidadeFinal"], x_label="Data", y_label="Quantidade", )


colg3, colg4 = st.columns(2)	
with colg3:
    st.write("Perfil de Sensibilidade dos Clientes:")
    # Criando um histograma simples da elasticidade
    hist_data = pd.DataFrame({
        'Elasticidade': dados_filtrados['elasticidade'].dropna()
    })
    st.bar_chart(hist_data)

with colg4:
    st.write("Evolu√ß√£o dos Pre√ßos:")
    st.bar_chart(dados_filtrados, x="data_adicionada", y=["precoInicio", "precoFinal"], x_label="Data", y_label="Pre√ßo", color=["#E63F1E", "#77210F"])
